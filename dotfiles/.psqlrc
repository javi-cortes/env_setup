\set QUIET 1



-- be verbose

\set VERBOSITY verbose



-- show query time

\timing



-- pager

\setenv PAGER less

\setenv LESS '-iMSx4 -FX'

\pset pager on



-- borders

\pset linestyle unicode

\pset border 2



-- colorize

\set PROMPT1 '%[%033[33;1m%]%x%[%033[0m%]%[%033[1m%]%/%[%033[0m%]%R%# '

\set PROMPT2 '[more] %R > '



-- logging per database, ignore duplicates

\set HISTFILE ~/.psql_history- :DBNAME

\set HISTCONTROL ignoredups



-- autocomplete keyword in upper case

\set COMP_KEYWORD_CASE upper



-- greeting

\echo '\nWelcome master, what''re you doing here?\n'



\set clear '\\! clear;'



\set uptime 'select pid, (case when pid = pg_backend_pid() then ''*'' else '''' end) as "current session", now() - backend_start as "uptime" from pg_stat_activity;'

\set settings 'select name, setting,unit,context from pg_settings;'

\set conninfo 'select usename, count(*) from pg_stat_activity group by usename;'



\set db_size 'SELECT d.datname AS Name, pg_catalog.pg_get_userbyid(d.datdba) AS Owner, CASE WHEN pg_catalog.has_database_privilege(d.datname, ''CONNECT'') THEN pg_catalog.pg_size_pretty(pg_catalog.pg_database_size(d.datname)) ELSE ''No Access'' END AS SIZE FROM pg_catalog.pg_database d ORDER BY CASE WHEN pg_catalog.has_database_privilege(d.datname, ''CONNECT'') THEN pg_catalog.pg_database_size(d.datname) ELSE NULL END;'

\set table_size 'SELECT relname AS "relation", pg_size_pretty(pg_total_relation_size(C.oid)) AS "total_size", pg_size_pretty(pg_relation_size(C.oid)) AS "data_size", pg_size_pretty(pg_total_relation_size(C.oid)-pg_relation_size(C.oid)) AS "index_size" FROM pg_class C LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace) WHERE nspname NOT IN (''pg_catalog'', ''information_schema'') AND C.relkind <> ''i'' AND nspname !~ ''^pg_toast'' ORDER BY pg_total_relation_size(C.oid) DESC;'

\set total_index_size 'SELECT pg_size_pretty(sum(relpages)*8192) AS size FROM pg_class WHERE reltype=0;'

\set index_size 'SELECT relname as "index", pg_size_pretty(cast(relpages as bigint) * 8192) AS size FROM pg_class WHERE reltype=0 order by relpages desc;'



\set seq_scans 'SELECT relname AS name, seq_scan as count FROM pg_stat_user_tables ORDER BY seq_scan DESC;'

\set unused_indexes 'SELECT schemaname || ''.'' || relname AS table, indexrelname AS index, pg_size_pretty(pg_relation_size(i.indexrelid)) AS index_size, idx_scan as index_scans FROM pg_stat_user_indexes ui JOIN pg_index i ON ui.indexrelid = i.indexrelid WHERE NOT indisunique AND idx_scan < 50 AND pg_relation_size(relid) > 5 * 8192 ORDER BY pg_relation_size(i.indexrelid) / nullif(idx_scan, 0) DESC NULLS FIRST, pg_relation_size(i.indexrelid) DESC;'

\set index_usage 'SELECT * FROM (SELECT stat.relname AS table, stai.indexrelname AS index, CASE stai.idx_scan WHEN 0 THEN ''Insufficient data'' ELSE (100 * stai.idx_scan / (stat.seq_scan + stai.idx_scan))::text || ''%'' END hit_rate, CASE stat.idx_scan WHEN 0 THEN ''Insufficient data'' ELSE (100 * stat.idx_scan / (stat.seq_scan + stat.idx_scan))::text || ''%'' END all_index_hit_rate, ARRAY(SELECT pg_get_indexdef(idx.indexrelid, k + 1, true) FROM generate_subscripts(idx.indkey, 1) AS k ORDER BY k) AS cols, stat.n_live_tup rows_in_table FROM pg_stat_user_indexes AS stai JOIN pg_stat_user_tables AS stat ON stai.relid = stat.relid JOIN pg_index AS idx ON (idx.indexrelid = stai.indexrelid)) AS sub_inner ORDER BY rows_in_table DESC, hit_rate ASC;'

\set bloat 'SELECT tablename as table_name, ROUND(CASE WHEN otta=0 THEN 0.0 ELSE sml.relpages/otta::numeric END,1) AS table_bloat, CASE WHEN relpages < otta THEN ''0'' ELSE pg_size_pretty((bs*(sml.relpages-otta)::bigint)::bigint) END AS table_waste, iname as index_name, ROUND(CASE WHEN iotta=0 OR ipages=0 THEN 0.0 ELSE ipages/iotta::numeric END,1) AS index_bloat, CASE WHEN ipages < iotta THEN ''0'' ELSE pg_size_pretty((bs*(ipages-iotta))::bigint) END AS index_waste FROM ( SELECT schemaname, tablename, cc.reltuples, cc.relpages, bs, CEIL((cc.reltuples*((datahdr+ma- (CASE WHEN datahdr%ma=0 THEN ma ELSE datahdr%ma END))+nullhdr2+4))/(bs-20::float)) AS otta, COALESCE(c2.relname,''?'') AS iname, COALESCE(c2.reltuples,0) AS ituples, COALESCE(c2.relpages,0) AS ipages, COALESCE(CEIL((c2.reltuples*(datahdr-12))/(bs-20::float)),0) AS iotta FROM ( SELECT ma,bs,schemaname,tablename, (datawidth+(hdr+ma-(case when hdr%ma=0 THEN ma ELSE hdr%ma END)))::numeric AS datahdr, (maxfracsum*(nullhdr+ma-(case when nullhdr%ma=0 THEN ma ELSE nullhdr%ma END))) AS nullhdr2 FROM ( SELECT schemaname, tablename, hdr, ma, bs, SUM((1-null_frac)*avg_width) AS datawidth, MAX(null_frac) AS maxfracsum, hdr+( SELECT 1+count(*)/8 FROM pg_stats s2 WHERE null_frac<>0 AND s2.schemaname = s.schemaname AND s2.tablename = s.tablename) AS nullhdr FROM pg_stats s, ( SELECT (SELECT current_setting(''block_size'')::numeric) AS bs, CASE WHEN substring(v,12,3) IN (''8.0'',''8.1'',''8.2'') THEN 27 ELSE 23 END AS hdr, CASE WHEN v ~ ''mingw32'' THEN 8 ELSE 4 END AS ma FROM (SELECT version() AS v) AS foo) AS constants GROUP BY 1,2,3,4,5) AS foo) AS rs JOIN pg_class cc ON cc.relname = rs.tablename JOIN pg_namespace nn ON cc.relnamespace = nn.oid AND nn.nspname = rs.schemaname AND nn.nspname <> ''information_schema'' LEFT JOIN pg_index i ON indrelid = cc.oid LEFT JOIN pg_class c2 ON c2.oid = i.indexrelid) AS sml ORDER BY CASE WHEN relpages < otta THEN 0 ELSE bs*(sml.relpages-otta)::bigint END DESC;'

\set cache_hit 'SELECT ''index hit rate'' as name, (sum(idx_blks_hit)) / sum(idx_blks_hit + idx_blks_read) as ratio FROM pg_statio_user_indexes union all SELECT ''cache hit rate'' as name, sum(heap_blks_hit) / (sum(heap_blks_hit) + sum(heap_blks_read)) as ratio FROM pg_statio_user_tables;'

\set vacuum 'WITH rel_set AS (SELECT oid, CASE split_part(split_part(array_to_string(reloptions, '',''), ''autovacuum_vacuum_threshold='', 2), '','', 1) WHEN '''' THEN NULL         ELSE split_part(split_part(array_to_string(reloptions, '',''), ''autovacuum_vacuum_threshold='', 2), '','', 1)::BIGINT         END AS rel_av_vac_threshold,         CASE split_part(split_part(array_to_string(reloptions, '',''), ''autovacuum_vacuum_scale_factor='', 2), '','', 1)             WHEN '''' THEN NULL         ELSE split_part(split_part(array_to_string(reloptions, '',''), ''autovacuum_vacuum_scale_factor='', 2), '','', 1)::NUMERIC         END AS rel_av_vac_scale_factor     FROM pg_class )  SELECT     PSUT.relname,     to_char(PSUT.last_vacuum, ''YYYY-MM-DD HH24:MI'')     AS last_vacuum,     to_char(PSUT.last_autovacuum, ''YYYY-MM-DD HH24:MI'') AS last_autovacuum,     to_char(C.reltuples, ''9G999G999G999'')               AS n_tup,     to_char(PSUT.n_dead_tup, ''9G999G999G999'')           AS dead_tup, to_char(coalesce(RS.rel_av_vac_threshold, current_setting(''autovacuum_vacuum_threshold'')::BIGINT) + coalesce(RS.rel_av_vac_scale_factor, current_setting(''autovacuum_vacuum_scale_factor'')::NUMERIC) * C.reltuples, ''9G999G999G999'') AS av_threshold,     CASE         WHEN (coalesce(RS.rel_av_vac_threshold, current_setting(''autovacuum_vacuum_threshold'')::BIGINT) + coalesce(RS.rel_av_vac_scale_factor, current_setting(''autovacuum_vacuum_scale_factor'')::NUMERIC) * C.reltuples) < PSUT.n_dead_tup         THEN ''*''     ELSE ''''     END AS expect_av FROM     pg_stat_user_tables PSUT     JOIN pg_class C         ON PSUT.relid = C.oid     JOIN rel_set RS         ON PSUT.relid = RS.oid ORDER BY C.reltuples DESC;'



\set show_activity 'select datname, pid, usename, client_addr, state, query from pg_stat_activity;'

\set ps 'select datname, pid, usename, client_addr, state, query from pg_stat_activity;'

\set show_slow_queries 'SELECT (total_time / 1000 / 60) as total_minutes, (total_time/calls) as average_time, query FROM pg_stat_statements ORDER BY 1 DESC LIMIT 100;'

\set show_blocked_queries 'select bl.pid as blocked_pid, ka.query as blocking_statement, now() - ka.query_start as blocking_duration, kl.pid as blocking_pid, a.query as blocked_statement, now() - a.query_start as blocked_duration from pg_catalog.pg_locks bl join pg_catalog.pg_stat_activity a on bl.pid = a.pid join pg_catalog.pg_locks kl join pg_catalog.pg_stat_activity ka on kl.pid = ka.pid on bl.transactionid = kl.transactionid and bl.pid != kl.pid where not bl.granted;'

\set show_locks 'select pg_stat_activity.pid, state, pg_class.relname, pg_locks.transactionid, pg_locks.granted, age(now(),pg_stat_activity.query_start) as "age", pg_stat_activity.query from pg_stat_activity,pg_locks left outer join pg_class on (pg_locks.relation = pg_class.oid) where pg_stat_activity.query <> ''<insufficient privilege>'' and pg_locks.pid=pg_stat_activity.pid and pg_locks.mode = ''ExclusiveLock'' order by query_start;'

\set show_long_running_queries 'SELECT pid, now() - pg_stat_activity.query_start AS duration, query AS query FROM pg_stat_activity WHERE pg_stat_activity.query <> ''''::text AND now() - pg_stat_activity.query_start > interval ''5 seconds'' and state=''active'' ORDER BY now() - pg_stat_activity.query_start DESC;'

\set show_long_running_queries_10s 'SELECT pid, now() - pg_stat_activity.query_start AS duration, query AS query FROM pg_stat_activity WHERE pg_stat_activity.query <> ''''::text AND now() - pg_stat_activity.query_start > interval ''10 seconds'' and state=''active''  ORDER BY now() - pg_stat_activity.query_start DESC;'

\set show_long_running_queries_20s 'SELECT pid, now() - pg_stat_activity.query_start AS duration, query AS query FROM pg_stat_activity WHERE pg_stat_activity.query <> ''''::text AND now() - pg_stat_activity.query_start > interval ''20 seconds'' and state=''active''  ORDER BY now() - pg_stat_activity.query_start DESC;'

\set show_long_running_queries_30s 'SELECT pid, now() - pg_stat_activity.query_start AS duration, query AS query FROM pg_stat_activity WHERE pg_stat_activity.query <> ''''::text AND now() - pg_stat_activity.query_start > interval ''30 seconds'' and state=''active''  ORDER BY now() - pg_stat_activity.query_start DESC;'

\set show_long_running_queries_40s 'SELECT pid, now() - pg_stat_activity.query_start AS duration, query AS query FROM pg_stat_activity WHERE pg_stat_activity.query <> ''''::text AND now() - pg_stat_activity.query_start > interval ''40 seconds'' and state=''active''  ORDER BY now() - pg_stat_activity.query_start DESC;'

\set show_long_running_queries_50s 'SELECT pid, now() - pg_stat_activity.query_start AS duration, query AS query FROM pg_stat_activity WHERE pg_stat_activity.query <> ''''::text AND now() - pg_stat_activity.query_start > interval ''50 seconds'' and state=''active''  ORDER BY now() - pg_stat_activity.query_start DESC;'

\set show_long_running_queries_1m 'SELECT pid, now() - pg_stat_activity.query_start AS duration, query AS query FROM pg_stat_activity WHERE pg_stat_activity.query <> ''''::text AND now() - pg_stat_activity.query_start > interval ''1 minutes'' and state=''active''  ORDER BY now() - pg_stat_activity.query_start DESC;'

\set show_long_running_queries_2m 'SELECT pid, now() - pg_stat_activity.query_start AS duration, query AS query FROM pg_stat_activity WHERE pg_stat_activity.query <> ''''::text AND now() - pg_stat_activity.query_start > interval ''2 minutes'' and state=''active''  ORDER BY now() - pg_stat_activity.query_start DESC;'

\set show_long_running_queries_3m 'SELECT pid, now() - pg_stat_activity.query_start AS duration, query AS query FROM pg_stat_activity WHERE pg_stat_activity.query <> ''''::text AND now() - pg_stat_activity.query_start > interval ''3 minutes'' and state=''active''  ORDER BY now() - pg_stat_activity.query_start DESC;'

\set show_long_running_queries_4m 'SELECT pid, now() - pg_stat_activity.query_start AS duration, query AS query FROM pg_stat_activity WHERE pg_stat_activity.query <> ''''::text AND now() - pg_stat_activity.query_start > interval ''4 minutes'' and state=''active''  ORDER BY now() - pg_stat_activity.query_start DESC;'

\set show_long_running_queries_5m 'SELECT pid, now() - pg_stat_activity.query_start AS duration, query AS query FROM pg_stat_activity WHERE pg_stat_activity.query <> ''''::text AND now() - pg_stat_activity.query_start > interval ''5 minutes'' and state=''active''  ORDER BY now() - pg_stat_activity.query_start DESC;'



\set help '\\echo ''-- GENERAL COMMNANDS\n:clear clears the screen\n:uptime shows all backend processes and their uptime\n:settings shows all settings\n:conninfo shows the connection count to each database\n\n-- SIZE RELATED COMMANDS\n:db_size shows the size of each database\n:table_size shows the physical size of each table, including their indexes\n:index_size shows the physical size of all indexesin the database\n:total_index_size shows the total physical size of all indexesin the database\n\n-- STATISTICS COMMANDS\n:seq_scans shows sequential scans on each table\n:unused_indexes shows unused indexes\n:index_usage shows information about index usage\n:bloat shows bloat on each table and their indexes\n:cache_hit shows cache hit rate information\n:vacuum shows vacuum and autovacuum statistics\n\n-- ACTIVITY COMMANDS\n:show_activity or :ps shows what is happening on each backend\n:show_slow_queries shows the top 100 slowest queries\n:show_blocked_queries shows blocked queries\n:show_locks shows queries that have adquired a lock and (possibly) lock other\n:show_long_running_queries shows queries that have been running for more than 5 seconds\n:show_long_running_queries_10s, :show_long_running_queries_20s, :show_long_running_queries_30s, :show_long_running_queries_40s,:show_long_running_queries_50s,\n:show_long_running_queries_1m, :show_long_running_queries_2m, :show_long_running_queries_3m, :show_long_running_queries_4m, :show_long_running_queries_5m\n\n'''



\unset QUIET


